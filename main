#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/objdetect.hpp>
#include <iostream>

using namespace cv;
using namespace std;

void  detectAndDraw(Mat& img, CascadeClassifier& faceCascade);

void main()
{
	VideoCapture cap(0);

	CascadeClassifier faceCascade;
	faceCascade.load("D://haarcascade_frontalface_default.xml");

	if (faceCascade.empty()) { cout << "XML file not loaded" << endl; }



	if (cap.isOpened() == false)
	{
		cout << "cannot open the video camera" << endl;
		cin.get();
	}

	double dWidth = cap.get(CAP_PROP_FRAME_WIDTH);
	double dHeight = cap.get(CAP_PROP_FRAME_HEIGHT);


	cout << "resolution of the video:" << dWidth << "x" << dHeight << endl;

	string window_name = "camera feed";
	namedWindow(window_name);



	while (true) {

		Mat frame;
		bool bSuccess = cap.read(frame);

		if (bSuccess == false)
		{
			cout << "video camera is disconnected " << endl;
			cin.get();
			break;

		}
		flip(frame, frame, 1);
		detectAndDraw(frame, faceCascade);
		//imshow(window_name, frame);




		if (waitKey(10) == 27)
		{
			cout << "Esc to close the video" << endl;
			break;
		}

	}




}

void  detectAndDraw(Mat& img, CascadeClassifier& faceCascade)
{
	vector<Rect> faces;
	faceCascade.detectMultiScale(img, faces, 1.1, 10);

	for (int i = 0; i < faces.size(); i++)
	{
		rectangle(img, faces[i].tl(), faces[i].br(), Scalar(0, 0, 255), 2);


	}

	imshow("detected_face", img);

}
